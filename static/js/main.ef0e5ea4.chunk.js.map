{"version":3,"sources":["styles/global.ts","assets/logo.svg","components/Header/styles.ts","components/Header/index.tsx","services/api.ts","hooks/useTransactions.tsx","assets/income.svg","assets/outcome.svg","assets/total.svg","components/Summary/styles.ts","components/Summary/index.tsx","components/Transactions Table/styles.ts","components/Transactions Table/index.tsx","components/Dashboard/styles.ts","components/Dashboard/index.tsx","assets/close.svg","components/NewTransactionsModal/styles.ts","components/NewTransactionsModal/index.tsx","App.tsx","index.tsx"],"names":["GlobalStyle","createGlobalStyle","Container","styled","header","Content","div","Header","onOpenNewTransactionModal","src","logoImg","alt","type","onClick","api","axios","create","baseURL","TransactionsContext","createContext","TransactionsProvider","children","useState","transactions","setTransactions","transactionInput","a","post","createdAt","Date","response","transaction","data","useEffect","get","then","Provider","value","createTransaction","useTransactions","useContext","Summary","summary","reduce","acc","deposits","amount","total","withdraws","incomeImg","Intl","NumberFormat","style","currency","format","outcomeImg","className","totalImg","TransactionsTable","map","title","category","DateTimeFormat","id","main","Dashboard","form","TransactionTypeContainer","colors","green","red","RadioBox","button","props","isActive","transparentize","activeColor","darken","NewTransactionModal","isOpen","onRequestClose","setTitle","setAmount","setCategory","setType","event","preventDefault","overlayClassName","closeImg","onSubmit","placeholder","onChange","target","Number","App","isNewTransactionModalOpen","setIsNewTransactionModalOpen","Modal","setAppElement","createServer","models","Model","seeds","server","db","loadData","routes","this","namespace","schema","all","request","JSON","parse","requestBody","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ef0e5ea4.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyle = createGlobalStyle`\n    \n    :root{\n        --background: #f0f2f5;\n        --red: #e52e4d;\n        --blue: #5429cc;\n        --green: #33CC95;\n        --blue-light: #6933ff;\n        --text-title: #363f5f;\n        --text-body: #969cb3;\n        --shape: #FFFFFF;\n\n    }\n\n    * {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n    }\n\n    // font-size: 16px;  \n    // media query\n    html{\n        @media(max-width: 1080px) {\n            font-size: 93.75%; //15px\n        }\n\n        @media(max-width: 720px) {\n            font-size: 87.5%; //14px\n        }\n    }\n\n    body{\n        background: var(--background);\n        -webkit-font-smoothing: antialiased;\n    }\n\n    body, input, textarea, button{\n        font-family: 'Poppins', sans-serif;\n        font-weight: 400;\n    }\n\n    h1, h2, h3, h4, h5, h6, strong {\n        font-weight: 600;\n    }\n    \n    button {\n        cursor: pointer;\n    }\n\n    [disabled] {\n        opacity: 0.6;\n        cursor: not-allowed;\n    }\n\n    .react-modal-overlay{\n        background: rgba(0,0,0, 0.5);\n        position: fixed;\n        top: 0;\n        left: 0;\n        right: 0;\n        bottom: 0;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n    }\n\n    .react-modal-content{\n        width: 100%;\n        max-width: 576px;\n        background: var(--background);\n        padding: 3rem;\n        position: relative;\n        border-radius: .25rem;\n    }\n\n    .react-modal-close{\n        position: absolute;\n        right: 1.5rem;\n        top: 1.5rem;\n        border: 0;\n        background: transparent;\n\n            transition: filter 0.2s;\n        \n        &:hover {\n            filter: brightness(0.9);\n        }\n    }\n\n`\n","export default __webpack_public_path__ + \"static/media/logo.614d71d1.svg\";","import styled from 'styled-components'\n\nexport const Container = styled.header`\n    background: var(--blue);\n\n\n`;\n\nexport const Content = styled.div`\n    max-width: 1120px;\n    margin: 0 auto;\n    \n    padding: 2rem 1rem 12rem;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n\n    button{ \n        font-size: 1rem;\n        color: #fff;\n        background: var(--blue-light);\n        border: 0;\n        padding: 0 2rem;\n        border-radius: 0.25rem;\n        height: 3rem;\n\n        transition: filter 0.2s;\n        \n        &:hover{\n            filter: brightness(0.9);\n        }\n\n    }\n`;","import logoImg from '../../assets/logo.svg';\nimport { Container } from './styles';\nimport { Content } from './styles';\n\ninterface HeaderProps {\n    onOpenNewTransactionModal: () => void;\n}\n\nexport function Header({ onOpenNewTransactionModal }: HeaderProps){\n    return(\n        <Container>\n            <Content>\n            <img src={logoImg} alt='lg money' />\n            <button type='button' onClick={onOpenNewTransactionModal}>\n            Nova Transação     \n            </button>\n            </Content>\n        </Container>\n    )\n}","import axios from 'axios';\n\nexport const api = axios.create({\n    baseURL: 'http://localhost:3000/api'\n})","import { createContext, useEffect, useState, ReactNode, useContext } from \"react\";\nimport { api } from \"../services/api\";\n\ninterface Transaction {\n    id: number;\n    title: string;\n    amount: number;\n    type: string;\n    category: string;\n    createdAt: string;\n}\n\ninterface TransactionsProviderProps{\n    children: ReactNode;\n}\n\ninterface TransactionsContextData {\n    transactions: Transaction[];\n    createTransaction: (transaction: TransactionInput) => Promise<void>;\n}\n\ntype TransactionInput = Omit<Transaction, \"id\" | \"createdAt\">;\n\nexport const TransactionsContext = createContext<TransactionsContextData>(\n    {} as TransactionsContextData\n);\n\nexport function TransactionsProvider({children}: TransactionsProviderProps){\n    \n    const [transactions, setTransactions] = useState<Transaction[]>([]);\n\n        useEffect(() => {\n            api.get('transactions')\n            .then(response => setTransactions(response.data.transactions))\n\n        }, []);\n\n        async function createTransaction(transactionInput: TransactionInput){\n            const response = await api.post('/transactions', {\n                ...transactionInput,\n                createdAt: new Date(),\n            });\n\n            const { transaction } = response.data;\n\n            setTransactions([\n                ...transactions,\n                transaction\n            ]);\n        }\n\n    return (\n        <TransactionsContext.Provider value={{transactions , createTransaction }}>\n            {children}\n        </TransactionsContext.Provider>\n    );\n}\n\nexport function useTransactions(){\n    \n    const context = useContext(TransactionsContext);\n\n    return context;\n}\n\n","export default __webpack_public_path__ + \"static/media/income.d58effe2.svg\";","export default __webpack_public_path__ + \"static/media/outcome.6eb96d30.svg\";","export default __webpack_public_path__ + \"static/media/total.e90c2d1e.svg\";","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    gap: 2rem;\n    margin-top: -6.5rem;\n\n    div {\n        background: var(--shape);\n        padding: 1.5rem 2rem;\n        border-radius: 0.25rem;\n        color: var(--text-title);\n    }\n\n    header{ \n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n    }\n\n    strong{\n        display: block; // para fazer o margin-top funcionar no strong\n        margin-top: 1rem;\n        font-size: 2rem;\n        line-height: 3rem;\n        font-weight: 500;\n    }\n\n    .highlight-background{\n        background: var(--green);\n        color: #fff;\n    }\n\n`;\n","import React, {useContext} from 'react';\nimport { useTransactions } from '../../hooks/useTransactions'\n\nimport incomeImg from '../../assets/income.svg'\nimport outcomeImg from '../../assets/outcome.svg'\nimport totalImg from '../../assets/total.svg'\n\nimport { Container } from \"./styles\"\n\nexport function Summary (){\n\n    const {transactions} = useTransactions();\n\n    const summary = transactions.reduce((acc, transaction) => {\n\n        if(transaction.type === \"deposit\") {\n            acc.deposits += transaction.amount;\n            acc.total += transaction.amount;\n        }\n        else {\n            acc.withdraws += transaction.amount;\n            acc.total -= transaction.amount;\n        }\n\n        return acc;\n\n    }, {\n        deposits: 0,\n        withdraws: 0,\n        total: 0,\n    });\n\n    return (\n   <Container>\n       <div>\n           <header>\n                <p>Entradas</p>\n                <img src={incomeImg} alt=\"income\" />\n           </header>\n           <strong>\n               {new  Intl.NumberFormat('pt-BR', {\n                style: 'currency',\n                currency: 'BRL'\n                }).format(summary.deposits)}\n            </strong>\n       </div>\n       <div>\n           <header>\n                <p>Saídas</p>\n                <img src={outcomeImg} alt=\"outcome\" />\n           </header>\n            <strong>\n                -\n               {new  Intl.NumberFormat('pt-BR', {\n                style: 'currency',\n                currency: 'BRL'\n                }).format(summary.withdraws)}\n            </strong>\n       </div>\n       <div className=\"highlight-background\">\n           <header>\n                <p>Total</p>\n                <img src={totalImg} alt=\"total\" />\n           </header>\n           <strong>\n                {new  Intl.NumberFormat('pt-BR', {\n                style: 'currency',\n                currency: 'BRL'\n                }).format(summary.total)}\n           </strong>\n       </div>\n   </Container>\n)\n}","import styled from 'styled-components'\n\nexport const Container = styled.div`\n    margin-top: 4rem;\n\n    table{\n        width: 100%;\n        border-spacing: 0 0.5rem;\n    }\n\n    th{\n        color: var(--text-body);\n        font-weight: 400;\n        padding: 1rem 2rem;\n        text-align: left;\n        line-height: 1.5rem;\n    }\n\n    td{\n        padding: 1rem 2rem;\n        border: 0;\n        background: var(--shapes);\n        color: var(--text-body);\n        border-radius: 0.25rem;\n    }\n\n    td:first-child {\n        color: var(--text-title);\n    }\n\n    td.deposit{\n        color: var(--green);\n    }\n\n    td.withdraw{\n        color: var(--red)\n    }\n\n`;","import { useContext} from 'react'\nimport { TransactionsContext } from '../../hooks/useTransactions';\nimport { Container } from './styles'\n\nexport function TransactionsTable(){\n\n    const {transactions} = useContext(TransactionsContext);\n    \n    return(\n    <Container>\n        <table>\n            <thead>\n                <tr>\n                    <th>Título</th>\n                    <th>Valor</th>\n                    <th>Categoria</th>\n                    <th>Data</th>\n                </tr>\n            </thead>\n            <tbody>\n                {transactions.map(transaction => {\n                    return (\n                        <tr key={transaction.id}>\n                            <td>{transaction.title}</td>\n                            <td className={transaction.type}>\n                                {new  Intl.NumberFormat('pt-BR', {\n                                    style: 'currency',\n                                    currency: 'BRL'\n                                }).format(transaction.amount)}</td>\n                            <td>{transaction.category}</td>\n                            <td>\n                            {new  Intl.DateTimeFormat('pt-BR').format(\n                                new Date(transaction.createdAt))}\n                                </td>\n                        </tr>\n                    );\n                })}\n            </tbody>\n        </table>\n    </Container>\n    );\n}","import styled from \"styled-components\";\n\nexport const Container = styled.main`\n    max-width: 1120px;\n    margin: 0 auto;\n    padding: 2.5rem 1rem; //primeiro rem - cima e embaixo segundo rem - laterais\n\n\n\n`;","import { Summary } from '../Summary';\nimport { TransactionsTable } from '../Transactions Table';\nimport { Container } from './styles'\n\nexport function Dashboard(){\nreturn(\n    <Container>\n        <Summary />\n        <TransactionsTable />\n    </Container>\n);\n}","export default __webpack_public_path__ + \"static/media/close.f62862c6.svg\";","import styled from 'styled-components';\nimport { darken , transparentize} from 'polished';\n\nexport const Container = styled.form`\n    h2 {\n    color: var(--text-title);\n    font-size: 1.5rem;\n    margin-bottom: 2rem;\n    }\n\n    input {\n        width: 100%;\n        padding: 0 1.5rem;\n        height: 4rem;\n        border-radius: 0.25rem;\n\n        border: 1px solid #d7d7d7;\n        background: #e7e9ee;\n\n        font-weight: 400;\n        font-size: 1rem;\n\n        &::placeholder{\n            color: var(--text-body);\n        }\n\n        & + input {\n            margin-top: 1rem;\n        }\n\n    }\n\n    button[type=\"submit\"] {\n            width: 100%;\n            padding: 0 1.5rem;\n            height: 4rem;\n            background: var(--green);\n            color: #FFF;\n            border-radius: 0.25rem;\n            border: 0;\n            font-size: 1rem;\n            margin-top: 1.5rem;\n            font-weight: 600;\n\n            transition: filter 0.2s;\n\n            &:hover{\n                filter: brightness(0.9);\n            }\n\n    }\n\n    \n`;\n\nexport const TransactionTypeContainer = styled.div`\n    margin: 1rem 0;\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    gap: 0.5rem;\n\n    \n`;\n\ninterface RadioBoxProps {\n    isActive: boolean;\n    activeColor: \"green\" | \"red\" ;\n}\n\nconst colors = {\n    green: '#33CC95',\n    red: '#e52e4d'\n}\n\nexport const RadioBox = styled.button<RadioBoxProps>`\n\n    height: 4rem;\n    border: 1px solid #d7d7d7;\n    border-radius: 0.25rem;\n\n    background: ${(props) => props.isActive \n    ? transparentize(0.9 , colors[props.activeColor]) \n    : 'transparent' };\n\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    transition: border-color 0.2s;\n\n    &:hover {\n        border-color: ${darken(0.1 , '#d7d7d7')}\n    }\n\n    img{\n        height: 20px;\n        width: 20px;\n    }\n\n    span{\n        display: inline-block;\n        margin-left: 1rem;\n        font-size: 1rem;\n        color: var(--text-title);\n    }\n\n`;","import { FormEvent, useState, useContext } from 'react';\nimport Modal from 'react-modal';\nimport { api } from '../../services/api';\nimport { useTransactions } from '../../hooks/useTransactions';\n\nimport closeImg from '../../assets/close.svg';\nimport incomeImg from '../../assets/income.svg';\nimport outcomeImg from '../../assets/outcome.svg';\n\nimport { Container, TransactionTypeContainer, RadioBox } from './styles';\n\ninterface NewTransactionModalProps{\n    isOpen: boolean;\n    onRequestClose: () => void;\n}\n\nexport function NewTransactionModal( { isOpen , onRequestClose }: NewTransactionModalProps){\n    \n    const [title, setTitle] = useState('');\n    const [amount, setAmount] = useState(0);\n    const [category, setCategory] = useState('');\n    \n    const { createTransaction } = useTransactions();\n\n\n    const [type, setType] = useState('deposit');\n\n    // handle: inputs vem de uma acao do usuário\n    async function handleCreateNewTransaction(event: FormEvent){\n        \n        event.preventDefault();\n\n        await createTransaction({\n            title,\n            amount,\n            category,\n            type,\n        });\n\n        setTitle('');\n        setAmount(0);\n        setCategory('');\n        setType('deposit');\n        onRequestClose();\n\n    }\n    \n    return (\n    <Modal \n            isOpen={isOpen} \n            onRequestClose={onRequestClose}\n            overlayClassName=\"react-modal-overlay\"\n            className=\"react-modal-content\"\n            >\n\n            <button \n            type=\"button\" \n            onClick={onRequestClose} \n            className=\"react-modal-close\"\n            >\n                <img src={closeImg} alt='closeButton' />\n            </button>\n      \n            <Container \n            onSubmit = {handleCreateNewTransaction}>\n\n            \n                <h2>Cadastrar Transação</h2>   \n                <input \n                placeholder='Título'\n                value={title}\n                onChange={event => setTitle(event.target.value)}\n                />\n\n                <input\n                type='number' \n                placeholder='Valor'\n                value={amount}\n                onChange={event => setAmount(Number(event.target.value))}\n                />\n\n                <TransactionTypeContainer> \n                    <RadioBox\n                    type = \"button\"\n                    onClick={() => { setType('deposit'); }}\n                    isActive = {type === 'deposit'}\n                    activeColor=\"green\"\n                    > \n                    <img src={incomeImg} alt='Entrada' />\n                    <span>Entrada</span>\n                    </RadioBox>\n\n                    <RadioBox\n                    type = 'button'\n                    onClick={() => { setType('withdraw'); }}\n                    isActive = {type === 'withdraw'}\n                    activeColor=\"red\"\n                    > \n                    <img src={outcomeImg} alt='Saída' />\n                    <span>Saída</span>\n                    </RadioBox>\n                </TransactionTypeContainer>\n\n                <input\n                placeholder='Categoria'\n                value={category}\n                onChange={event => setCategory(event.target.value)} \n                />\n                   \n                <button type='submit'>\n                    Cadastrar\n                </button>\n                        \n            </ Container >\n\n    </Modal>\n    );\n}","import Modal from 'react-modal'\nimport { useState } from 'react';\nimport { GlobalStyle } from \"./styles/global\";\nimport{ Header } from '../src/components/Header'\nimport { Dashboard } from \"./components/Dashboard\";\nimport { NewTransactionModal } from './components/NewTransactionsModal';\nimport { TransactionsProvider } from './hooks/useTransactions';\n\nModal.setAppElement('#root');\n\nexport function App() {\n  \n  const [isNewTransactionModalOpen, setIsNewTransactionModalOpen] = useState(false);\n\n    function handleOpenNewTransactionModal() {\n        setIsNewTransactionModalOpen(true);\n    }\n\n    function handleCloseNewTransactionModal() {\n        setIsNewTransactionModalOpen(false);\n    }\n  \n  return (\n    <TransactionsProvider>\n      <Header onOpenNewTransactionModal = {handleOpenNewTransactionModal} />\n      \n      <Dashboard />\n\n      <NewTransactionModal \n      isOpen = {isNewTransactionModalOpen}\n      onRequestClose = {handleCloseNewTransactionModal}\n      />\n\n      <GlobalStyle />\n    </TransactionsProvider>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createServer , Model } from 'miragejs';\nimport { App } from './App';\n\ncreateServer({\n\n    models: {\n      transaction: Model,\n\n    },\n\n    seeds(server) {\n        server.db.loadData({\n            transactions: [\n              {\n                id: 1,\n                title: 'Freelance de Website',\n                type: 'deposit',\n                category: 'Dev',\n                amount: 6000,\n                createdAt: new Date('2022-01-15 09:00:00'),\n              },\n              {\n                id: 2,\n                title: 'Aluguel',\n                type: 'withdraw',\n                category: 'Casa',\n                amount: 1200,\n                createdAt: new Date('2022-01-14 07:00:00'),\n              }\n            ]\n        })\n    },\n\n  routes(){\n    this.namespace = 'api';\n    this.get('/transactions', () => {\n      return this.schema.all('transaction');\n    })\n\n    this.post('transactions', (schema, request) => {\n      const data = JSON.parse(request.requestBody)\n\n      return schema.create('transaction' , data);\n    })\n  }\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}